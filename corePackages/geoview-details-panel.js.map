{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":";u5CAiBA,IAAMA,EAAIC,OAKJC,EAAa,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,EAAAC,EAAAJ,GAIjB,SAAAA,EAAYK,EAAkBC,GAA0B,IAAAC,EAE9B,OAF8BC,EAAAA,EAAAA,GAAA,KAAAR,GACtDO,EAAAJ,EAAAM,KAAA,KAAMJ,EAAUC,IAIlBI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,UAKS,kBAAuBK,CAAM,KAEtCF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,iBAKgB,kBAAsBM,EAAAA,EAAAA,KAAaC,EAAc,KAEjEJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,gBAGeM,EAAAA,EAAAA,KAAa,CAC1BE,GAAI,CACFC,aAAc,UACdC,cAAe,gBACfC,UAAW,qCACXC,YAAa,QAEfC,GAAI,CACFJ,aAAc,UACdC,cAAe,iBACfC,UAAW,kDACXC,YAAa,aA/BfZ,EAAKc,YAAc,KAAKd,CAC1B,CAsFC,OAtFAe,EAAAA,EAAAA,GAAAtB,EAAA,EAAAuB,IAAA,QAAAC,MAqCD,WACE,IAAQC,EAAWC,KAAwBC,YAAnCF,MAGAG,EAAS9B,EAAT8B,KAGAC,EAAYD,EAAZC,IACAC,EADYF,EAAPG,GACcC,SAAnBF,YACAG,EAAoBJ,EAAIK,KAAKT,GAA7BQ,gBAGFE,EAA8B,CAClCC,GAAI,qBACJC,QAASX,KAAKY,aAAaL,GAAiBjB,aAC5CuB,iBAAkB,QAClBC,UAAUC,EAAAA,EAAAA,KAACX,EAAW,IACtBY,SAAS,GAILC,EAAwB,CAC5BC,MAAOlB,KAAKY,aAAaL,GAAiBjB,aAC1C6B,KAAM,wCACNC,MAAO,KAITpB,KAAKL,YAAcQ,EAAIK,KAAKT,GAAOsB,cAAcC,kBAAkBb,EAAQQ,EAAO,KAIpF,GAEA,CAAApB,IAAA,UAAAC,MAGA,WACE,IAAQC,EAAWC,KAAwBC,YAAnCF,MAMAI,EAHS/B,EAAT8B,KAGAC,IAEJH,KAAKL,aACPQ,EAAIK,KAAKT,GAAiBsB,cAAcE,kBAAkBvB,KAAKL,YAAY6B,cAE/E,KAAClD,CAAA,CA7FgB,CAASmD,EAAAA,KAkG5BrD,EAAEsD,QAAUtD,EAAEsD,SAAW,CAAC,EAC1BtD,EAAEsD,QAAQ,iBAAmBpD,C","sources":["webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  AbstractPlugin,\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeIconButtonProps,\n  TypePanelProps,\n  AnySchemaObject,\n} from 'geoview-core';\n// import { DetailsItem } from './details-item';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-details-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass DetailsPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      detailsPanel: 'Details',\n      nothing_found: 'Nothing found',\n      click_map: 'Choose a point on the map to start',\n      action_back: 'Back',\n    },\n    fr: {\n      detailsPanel: 'Détails',\n      nothing_found: 'Aucun résultat',\n      click_map: 'Choisissez un point sur la carte pour commencer',\n      action_back: 'Retour',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added(): void {\n    const { mapId } = (this as AbstractPlugin).pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { DetailsIcon } = ui.elements;\n    const { displayLanguage } = api.maps[mapId];\n\n    // button props\n    const button: TypeIconButtonProps = {\n      id: 'detailsPanelButton',\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\n      tooltipPlacement: 'right',\n      children: <DetailsIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[displayLanguage].detailsPanel,\n      icon: '<i class=\"material-icons\">details</i>',\n      width: 350,\n    };\n\n    // create a new button panel on the app-bar\n    this.buttonPanel = api.maps[mapId].appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    // this.buttonPanel?.panel?.changeContent(<DetailsItem mapId={mapId} buttonId={button.id} />);\n  }\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = (this as AbstractPlugin).pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.maps[mapId as string].appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n\nexport default DetailsPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['details-panel'] = DetailsPlugin as AbstractPlugin;\n"],"names":["w","window","DetailsPlugin","_AbstractPlugin","_inherits","_super","_createSuper","pluginId","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","schema","toJsonObject","defaultConfig","en","detailsPanel","nothing_found","click_map","action_back","fr","buttonPanel","_createClass","key","value","mapId","this","pluginProps","cgpv","api","DetailsIcon","ui","elements","displayLanguage","maps","button","id","tooltip","translations","tooltipPlacement","children","_jsx","visible","panel","title","icon","width","appBarButtons","createAppbarPanel","removeAppbarPanel","buttonPanelId","AbstractPlugin","plugins"],"sourceRoot":""}